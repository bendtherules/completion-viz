// Generated automatically by nearley, version 2.19.0
// http://github.com/Hardmath123/nearley
function id(x) { return x[0]; }

import Scientific from './Scientific.mjs';
function c(val) {
  return () => val;
}
let Lexer = undefined;
let ParserRules = [
    {"name": "StrNumericLiteral", "symbols": ["StrDecimalLiteral"], "postprocess": ([StrDecimalLiteral]) => StrDecimalLiteral},
    {"name": "StrNumericLiteral", "symbols": ["BinaryIntegerLiteral"], "postprocess": ([BinaryIntegerLiteral]) => BinaryIntegerLiteral},
    {"name": "StrNumericLiteral", "symbols": ["OctalIntegerLiteral"], "postprocess": ([OctalIntegerLiteral]) => OctalIntegerLiteral},
    {"name": "StrNumericLiteral", "symbols": ["HexIntegerLiteral"], "postprocess": ([HexIntegerLiteral]) => HexIntegerLiteral},
    {"name": "StrDecimalLiteral", "symbols": ["StrUnsignedDecimalLiteral"], "postprocess": ([StrUnsignedDecimalLiteral]) => StrUnsignedDecimalLiteral},
    {"name": "StrDecimalLiteral", "symbols": [{"literal":"+"}, "StrUnsignedDecimalLiteral"], "postprocess": ([_, StrUnsignedDecimalLiteral]) => StrUnsignedDecimalLiteral},
    {"name": "StrDecimalLiteral", "symbols": [{"literal":"-"}, "StrUnsignedDecimalLiteral"], "postprocess": ([_, StrUnsignedDecimalLiteral]) => StrUnsignedDecimalLiteral.negate()},
    {"name": "StrUnsignedDecimalLiteral$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"f"}, {"literal":"i"}, {"literal":"n"}, {"literal":"i"}, {"literal":"t"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "StrUnsignedDecimalLiteral", "symbols": ["StrUnsignedDecimalLiteral$string$1"], "postprocess": () => new Scientific(1n, 10000n)},
    {"name": "StrUnsignedDecimalLiteral", "symbols": ["DecimalDigits", {"literal":"."}], "postprocess": ([[DecimalDigits]]) => new Scientific(DecimalDigits)},
    {"name": "StrUnsignedDecimalLiteral", "symbols": ["DecimalDigits", {"literal":"."}, "DecimalDigits"], "postprocess": ([[first], _, [second, n]]) => new Scientific(first).addSci(new Scientific(second, -n))},
    {"name": "StrUnsignedDecimalLiteral", "symbols": ["DecimalDigits", {"literal":"."}, "ExponentPart"], "postprocess": ([[DecimalDigits], _, e]) => new Scientific(DecimalDigits, e)},
    {"name": "StrUnsignedDecimalLiteral", "symbols": ["DecimalDigits", {"literal":"."}, "DecimalDigits", "ExponentPart"], "postprocess": ([[first], _, [second, n], e]) => (new Scientific(first).addSci(new Scientific(second, -n))).expAdd(e)},
    {"name": "StrUnsignedDecimalLiteral", "symbols": [{"literal":"."}, "DecimalDigits"], "postprocess": ([_, [DecimalDigits, n]]) => new Scientific(DecimalDigits, -n)},
    {"name": "StrUnsignedDecimalLiteral", "symbols": [{"literal":"."}, "DecimalDigits", "ExponentPart"], "postprocess": ([_, [DecimalDigits, n], e]) => new Scientific(DecimalDigits, e - n)},
    {"name": "StrUnsignedDecimalLiteral", "symbols": ["DecimalDigits"], "postprocess": ([[DecimalDigits]]) => new Scientific(DecimalDigits)},
    {"name": "StrUnsignedDecimalLiteral", "symbols": ["DecimalDigits", "ExponentPart"], "postprocess": ([[DecimalDigits], e]) => new Scientific(DecimalDigits, e)},
    {"name": "NumericLiteral", "symbols": ["DecimalLiteral"], "postprocess": ([DecimalLiteral]) => DecimalLiteral},
    {"name": "NumericLiteral", "symbols": ["BinaryIntegerLiteral"], "postprocess": ([BinaryIntegerLiteral]) => BinaryIntegerLiteral},
    {"name": "NumericLiteral", "symbols": ["OctalIntegerLiteral"], "postprocess": ([OctalIntegerLiteral]) => OctalIntegerLiteral},
    {"name": "NumericLiteral", "symbols": ["HexIntegerLiteral"], "postprocess": ([HexIntegerLiteral]) => HexIntegerLiteral},
    {"name": "DecimalLiteral", "symbols": ["DecimalIntegerLiteral", {"literal":"."}], "postprocess": ([DecimalIntegerLiteral]) => new Scientific(DecimalIntegerLiteral)},
    {"name": "DecimalLiteral", "symbols": ["DecimalIntegerLiteral", {"literal":"."}, "DecimalDigits"], "postprocess": ([DecimalIntegerLiteral, _, [DecimalDigits, n]]) => new Scientific(DecimalIntegerLiteral).addSci(new Scientific(DecimalDigits, -n))},
    {"name": "DecimalLiteral", "symbols": ["DecimalIntegerLiteral", {"literal":"."}, "ExponentPart"], "postprocess": ([DecimalIntegerLiteral, _, e]) => new Scientific(DecimalIntegerLiteral, e)},
    {"name": "DecimalLiteral", "symbols": ["DecimalIntegerLiteral", {"literal":"."}, "DecimalDigits", "ExponentPart"], "postprocess": ([DecimalIntegerLiteral, _, [DecimalDigits, n], e]) => new Scientific(DecimalIntegerLiteral).addSci(new Scientific(DecimalDigits, -n)).expAdd(e)},
    {"name": "DecimalLiteral", "symbols": [{"literal":"."}, "DecimalDigits"], "postprocess": ([_, [DecimalDigits, n]]) => new Scientific(DecimalDigits, -n)},
    {"name": "DecimalLiteral", "symbols": [{"literal":"."}, "DecimalDigits", "ExponentPart"], "postprocess": ([_, [DecimalDigits, n], e]) => new Scientific(DecimalDigits, e - n)},
    {"name": "DecimalLiteral", "symbols": ["DecimalIntegerLiteral"], "postprocess": ([DecimalIntegerLiteral]) => new Scientific(DecimalIntegerLiteral)},
    {"name": "DecimalLiteral", "symbols": ["DecimalIntegerLiteral", "ExponentPart"], "postprocess": ([DecimalIntegerLiteral, e]) => new Scientific(DecimalIntegerLiteral, e)},
    {"name": "DecimalIntegerLiteral", "symbols": [{"literal":"0"}], "postprocess": c(0n)},
    {"name": "DecimalIntegerLiteral", "symbols": ["NonZeroDigit"], "postprocess": ([NonZeroDigit]) => NonZeroDigit},
    {"name": "DecimalIntegerLiteral", "symbols": ["NonZeroDigit", "DecimalDigits"], "postprocess": ([NonZeroDigit, [DecimalDigits, n]]) => NonZeroDigit * (10n ** n) + DecimalDigits},
    {"name": "DecimalDigits", "symbols": ["DecimalDigit"], "postprocess": ([DecimalDigit]) => [DecimalDigit, 1n]},
    {"name": "DecimalDigits", "symbols": ["DecimalDigits", "DecimalDigit"], "postprocess": ([[DecimalDigits, n], DecimalDigit]) => [DecimalDigits * 10n + DecimalDigit, n + 1n]},
    {"name": "DecimalDigit", "symbols": [{"literal":"0"}], "postprocess": c(0n)},
    {"name": "DecimalDigit", "symbols": [{"literal":"1"}], "postprocess": c(1n)},
    {"name": "DecimalDigit", "symbols": [{"literal":"2"}], "postprocess": c(2n)},
    {"name": "DecimalDigit", "symbols": [{"literal":"3"}], "postprocess": c(3n)},
    {"name": "DecimalDigit", "symbols": [{"literal":"4"}], "postprocess": c(4n)},
    {"name": "DecimalDigit", "symbols": [{"literal":"5"}], "postprocess": c(5n)},
    {"name": "DecimalDigit", "symbols": [{"literal":"6"}], "postprocess": c(6n)},
    {"name": "DecimalDigit", "symbols": [{"literal":"7"}], "postprocess": c(7n)},
    {"name": "DecimalDigit", "symbols": [{"literal":"8"}], "postprocess": c(8n)},
    {"name": "DecimalDigit", "symbols": [{"literal":"9"}], "postprocess": c(9n)},
    {"name": "NonZeroDigit", "symbols": [{"literal":"1"}], "postprocess": c(1n)},
    {"name": "NonZeroDigit", "symbols": [{"literal":"2"}], "postprocess": c(2n)},
    {"name": "NonZeroDigit", "symbols": [{"literal":"3"}], "postprocess": c(3n)},
    {"name": "NonZeroDigit", "symbols": [{"literal":"4"}], "postprocess": c(4n)},
    {"name": "NonZeroDigit", "symbols": [{"literal":"5"}], "postprocess": c(5n)},
    {"name": "NonZeroDigit", "symbols": [{"literal":"6"}], "postprocess": c(6n)},
    {"name": "NonZeroDigit", "symbols": [{"literal":"7"}], "postprocess": c(7n)},
    {"name": "NonZeroDigit", "symbols": [{"literal":"8"}], "postprocess": c(8n)},
    {"name": "NonZeroDigit", "symbols": [{"literal":"9"}], "postprocess": c(9n)},
    {"name": "ExponentPart", "symbols": ["ExponentIndicator", "SignedInteger"], "postprocess": ([_, SignedInteger]) => SignedInteger},
    {"name": "ExponentIndicator$subexpression$1", "symbols": [/[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "ExponentIndicator", "symbols": ["ExponentIndicator$subexpression$1"]},
    {"name": "SignedInteger", "symbols": ["DecimalDigits"], "postprocess": ([[DecimalDigits]]) => DecimalDigits},
    {"name": "SignedInteger", "symbols": [{"literal":"+"}, "DecimalDigits"], "postprocess": ([_, [DecimalDigits]]) => DecimalDigits},
    {"name": "SignedInteger", "symbols": [{"literal":"-"}, "DecimalDigits"], "postprocess": ([_, [DecimalDigits]]) => -DecimalDigits},
    {"name": "BinaryIntegerLiteral$subexpression$1", "symbols": [{"literal":"0"}, /[bB]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "BinaryIntegerLiteral", "symbols": ["BinaryIntegerLiteral$subexpression$1", "BinaryDigits"], "postprocess": ([_, BinaryDigits]) => new Scientific(BinaryDigits)},
    {"name": "BinaryDigits", "symbols": ["BinaryDigit"], "postprocess": ([BinaryDigit]) => BinaryDigit},
    {"name": "BinaryDigits", "symbols": ["BinaryDigits", "BinaryDigit"], "postprocess": ([BinaryDigits, BinaryDigit]) => BinaryDigits * 2n + BinaryDigit},
    {"name": "BinaryDigit", "symbols": [{"literal":"0"}], "postprocess": c(0n)},
    {"name": "BinaryDigit", "symbols": [{"literal":"1"}], "postprocess": c(1n)},
    {"name": "OctalIntegerLiteral$subexpression$1", "symbols": [{"literal":"0"}, /[oO]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "OctalIntegerLiteral", "symbols": ["OctalIntegerLiteral$subexpression$1", "OctalDigits"], "postprocess": ([_, OctalDigits]) => new Scientific(OctalDigits)},
    {"name": "OctalDigits", "symbols": ["OctalDigit"], "postprocess": ([OctalDigit]) => OctalDigit},
    {"name": "OctalDigits", "symbols": ["OctalDigits", "OctalDigit"], "postprocess": ([OctalDigits, OctalDigit]) => OctalDigits * 8n + OctalDigit},
    {"name": "OctalDigit", "symbols": [{"literal":"0"}], "postprocess": c(0n)},
    {"name": "OctalDigit", "symbols": [{"literal":"1"}], "postprocess": c(1n)},
    {"name": "OctalDigit", "symbols": [{"literal":"2"}], "postprocess": c(2n)},
    {"name": "OctalDigit", "symbols": [{"literal":"3"}], "postprocess": c(3n)},
    {"name": "OctalDigit", "symbols": [{"literal":"4"}], "postprocess": c(4n)},
    {"name": "OctalDigit", "symbols": [{"literal":"5"}], "postprocess": c(5n)},
    {"name": "OctalDigit", "symbols": [{"literal":"6"}], "postprocess": c(6n)},
    {"name": "OctalDigit", "symbols": [{"literal":"7"}], "postprocess": c(7n)},
    {"name": "HexIntegerLiteral$subexpression$1", "symbols": [{"literal":"0"}, /[xX]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "HexIntegerLiteral", "symbols": ["HexIntegerLiteral$subexpression$1", "HexDigits"], "postprocess": ([_, HexDigits]) => new Scientific(HexDigits)},
    {"name": "HexDigits", "symbols": ["HexDigit"], "postprocess": ([HexDigit]) => HexDigit},
    {"name": "HexDigits", "symbols": ["HexDigits", "HexDigit"], "postprocess": ([HexDigits, HexDigit]) => HexDigits * 16n + HexDigit},
    {"name": "HexDigit", "symbols": [{"literal":"0"}], "postprocess": c(0n)},
    {"name": "HexDigit", "symbols": [{"literal":"1"}], "postprocess": c(1n)},
    {"name": "HexDigit", "symbols": [{"literal":"2"}], "postprocess": c(2n)},
    {"name": "HexDigit", "symbols": [{"literal":"3"}], "postprocess": c(3n)},
    {"name": "HexDigit", "symbols": [{"literal":"4"}], "postprocess": c(4n)},
    {"name": "HexDigit", "symbols": [{"literal":"5"}], "postprocess": c(5n)},
    {"name": "HexDigit", "symbols": [{"literal":"6"}], "postprocess": c(6n)},
    {"name": "HexDigit", "symbols": [{"literal":"7"}], "postprocess": c(7n)},
    {"name": "HexDigit", "symbols": [{"literal":"8"}], "postprocess": c(8n)},
    {"name": "HexDigit", "symbols": [{"literal":"9"}], "postprocess": c(9n)},
    {"name": "HexDigit$subexpression$1", "symbols": [/[aA]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "HexDigit", "symbols": ["HexDigit$subexpression$1"], "postprocess": c(10n)},
    {"name": "HexDigit$subexpression$2", "symbols": [/[bB]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "HexDigit", "symbols": ["HexDigit$subexpression$2"], "postprocess": c(11n)},
    {"name": "HexDigit$subexpression$3", "symbols": [/[cC]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "HexDigit", "symbols": ["HexDigit$subexpression$3"], "postprocess": c(12n)},
    {"name": "HexDigit$subexpression$4", "symbols": [/[dD]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "HexDigit", "symbols": ["HexDigit$subexpression$4"], "postprocess": c(13n)},
    {"name": "HexDigit$subexpression$5", "symbols": [/[eE]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "HexDigit", "symbols": ["HexDigit$subexpression$5"], "postprocess": c(14n)},
    {"name": "HexDigit$subexpression$6", "symbols": [/[fF]/], "postprocess": function(d) {return d.join(""); }},
    {"name": "HexDigit", "symbols": ["HexDigit$subexpression$6"], "postprocess": c(15n)}
];
let ParserStart = "StrNumericLiteral";
export default { Lexer, ParserRules, ParserStart };
